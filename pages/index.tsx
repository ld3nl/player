import Head from "next/head";
import { useState, useEffect } from "react";
import { GetServerSideProps, GetStaticProps } from "next";
import LRUCache from "lru-cache";

import { getAllPostsFromServer, getCategoryCount } from "../lib/utils";
import AudioPlayer from "@/components/Player";

type Post = {
  audioUrl: any;
  title: any;
  date: string;
};

type HomeProps = {
  posts: Post[];
  totalPosts: number;
};

const cache = new LRUCache({
  max: 500, // maximum number of entries
  maxAge: 1000 * 60 * 60, // maximum age of an entry in milliseconds (1 hour)
});

const DEFAULT_NUMBER_OF_POSTS = 1;

export default function Home({ posts, totalPosts }: HomeProps) {
  const [numberOfPost, setNumberOfPost] = useState<number>(
    DEFAULT_NUMBER_OF_POSTS
  );

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div>hello</div>
      <input
        type="number"
        onChange={(e) => setNumberOfPost(Number(e.target.value))}
      />
      {posts &&
        posts.slice(0, numberOfPost).map((post, id) => {
          const { audioUrl, title, date } = post;

          return (
            <div key={`item-${id}`} className="col-md-6">
              <AudioPlayer
                title={title.rendered}
                src={`https://www.paullowe.org/wp-content/uploads/${audioUrl}`}
                date={date}
              />
            </div>
          );
        })}
    </>
  );
}

export const getServerSideProps: GetServerSideProps = async (context) => {
  const key = "posts";
  const cachedData = cache.get(key);

  if (cachedData) {
    console.log(`Cache hit for key: ${key}`);
    return { props: cachedData };
  }

  const categoriesCount = await getCategoryCount(80);
  const totalPosts = categoriesCount; // assuming total number of posts is the same as the total number of categories

  const numberOfRequests = Math.ceil(totalPosts / 99);
  const promises = [];

  for (let i = 0; i < numberOfRequests; i++) {
    const offset = i * 99;
    promises.push(getAllPostsFromServer(80, 99, offset));
  }

  const postsFromServer = await Promise.all(promises).then((results) =>
    results.flat().map(({ excerpt, title, date }) => {
      const pattern = /src="([^"]*)/;
      const match = excerpt.rendered.match(pattern);
      const audioUrl = match
        ? match[1].replace(
            /^(https?:\/\/)?(www\.)?paullowe\.org\/wp-content\/uploads\//,
            ""
          )
        : "";

      return {
        audioUrl: audioUrl,
        title,
        date,
      };
    })
  );

  const data = {
    posts: postsFromServer,
    totalPosts,
  };

  cache.set(key, { ...data }); // store the data in cache
  console.log(`Cache miss for key: ${key}`);

  return { props: data };
};
